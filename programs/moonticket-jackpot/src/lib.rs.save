use anchor_lang::prelude::*;
use std::str::FromStr;

declare_id!("GmyMFG4QwHh2YK4bjy489eBzf9Hzf3BLZ1sFfznoeWpB");

#[program]
pub mod moonticket_jackpot {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {
        let state = &mut ctx.accounts.jackpot;
        state.authority = ctx.accounts.authority.key();
        Ok(())
    }

    pub fn enter_jackpot(ctx: Context<EnterJackpot>, _usd_spent: f64) -> Result<()> {
        Ok(())
    }

    pub fn execute_moon_draw(ctx: Context<DrawJackpot>) -> Result<()> {
        Ok(())
    }

    pub fn execute_mega_moon_draw(ctx: Context<DrawJackpot>) -> Result<()> {
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(
        init,
        payer = authority,
        space = 8 + Jackpot::LEN
    )]
    pub jackpot: Account<'info, Jackpot>,

    #[account(mut)]
    pub authority: Signer<'info>,

    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct EnterJackpot<'info> {
    #[account(mut)]
    pub jackpot: Account<'info, Jackpot>,
    pub user: Signer<'info>,
}

#[derive(Accounts)]
pub struct DrawJackpot<'info> {
    #[account(mut)]
    pub jackpot: Account<'info, Jackpot>,

    #[account(mut)]
    pub jackpot_sol_account: SystemAccount<'info>,

    #[account(mut, address = Pubkey::from_str("FN1cuAr7FM4iYyNKF7kswTeoCASjAibLnmWHUN9m197e").unwrap())]
    pub founder: SystemAccount<'info>,

    #[account(mut, address = Pubkey::from_str("AwQEfwAXLyionsg2fKLBadvGLr1QmeHWF7ctQ3CD4cCq").unwrap())]
    pub treasury: SystemAccount<'info>,

    /// CHECK: This is a runtime-selected winner account
    #[account(mut)]
    pub winner: UncheckedAccount<'info>,
}

#[account]
pub struct Jackpot {
    pub authority: Pubkey,
}

impl Jackpot {
    pub const LEN: usize = 32; // only authority for now
}
